[
    {
        "id": "f56ccabd.7567e8",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": ""
    },
    {
        "id": "1cdc2a24.b3be46",
        "type": "mqtt-broker",
        "name": "kelder",
        "broker": "192.168.1.111",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "4cba3bfa.4b1ed4",
        "type": "ui_base",
        "theme": {
            "name": "theme-custom",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#4B7930",
                    "value": "#4B7930",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#4B7930",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#6db046",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#4b7930",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#484747",
                    "edited": true
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "c6a4fc1c.14d61",
        "type": "file in",
        "z": "f56ccabd.7567e8",
        "name": "",
        "filename": "C:\\Users\\Kasutaja\\.node-red\\static\\homecontrol\\init.json",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 235,
        "y": 40,
        "wires": [
            [
                "616bbd4b.f95f14"
            ]
        ],
        "l": false
    },
    {
        "id": "5784fa1.4d45304",
        "type": "inject",
        "z": "f56ccabd.7567e8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 40,
        "wires": [
            [
                "c6a4fc1c.14d61"
            ]
        ]
    },
    {
        "id": "616bbd4b.f95f14",
        "type": "json",
        "z": "f56ccabd.7567e8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 320,
        "y": 40,
        "wires": [
            [
                "c0a36ddc.5194f"
            ]
        ]
    },
    {
        "id": "c0a36ddc.5194f",
        "type": "function",
        "z": "f56ccabd.7567e8",
        "name": "device config",
        "func": "var controllers = []\nvar devices = []\nvar switches = []\nObject.keys(msg.payload.controllers).forEach(c => createController(c))\nObject.keys(msg.payload.devices).forEach(c => createDevice(c))\nObject.keys(msg.payload.switches).forEach(c => createSwitch(c))\nfunction createController(e){\n    controllers.push(e)\n    global.set(msg.payload.controllers[e].name,msg.payload.controllers[e])\n}\nfunction createDevice(e){\n    devices.push(e)\n    global.set(e,msg.payload.devices[e])\n}\nfunction createSwitch(e){\n    switches.push(e)\n    global.set(e,msg.payload.switches[e])\n}\nglobal.set(\"devices\",devices)\nglobal.set(\"controllers\",controllers)\nglobal.set(\"switches\",switches)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 40,
        "wires": [
            [
                "d53d9df.ba39b6"
            ]
        ]
    },
    {
        "id": "d53d9df.ba39b6",
        "type": "debug",
        "z": "f56ccabd.7567e8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 40,
        "wires": []
    },
    {
        "id": "bd6e4368.4cf46",
        "type": "mqtt in",
        "z": "f56ccabd.7567e8",
        "name": "",
        "topic": "tele/#",
        "qos": "1",
        "datatype": "auto",
        "broker": "1cdc2a24.b3be46",
        "nl": false,
        "rap": false,
        "x": 130,
        "y": 220,
        "wires": [
            [
                "d7f2018b.7622f"
            ]
        ]
    },
    {
        "id": "73e49156.2b0bc",
        "type": "change",
        "z": "f56ccabd.7567e8",
        "name": "parse topic",
        "rules": [
            {
                "t": "set",
                "p": "target",
                "pt": "msg",
                "to": "$split(msg.topic, \"/\")[1]",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "command",
                "pt": "msg",
                "to": "$split(msg.topic, \"/\")[2]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 395,
        "y": 220,
        "wires": [
            [
                "6e33a0df.e6401"
            ]
        ],
        "l": false
    },
    {
        "id": "6e33a0df.e6401",
        "type": "function",
        "z": "f56ccabd.7567e8",
        "name": "parse and set",
        "func": "var target = global.get(msg.target) || null;\nif(target === null){\n    return;\n}\nconst stamp = new Date().getTime()\nlet output = null\n\nswitch(msg.command){\n    case \"LWT\":{\n        target.lastupdate = stamp;\n        target.connection.status = msg.payload\n        global.set(target.name,target)\n        if(target.clients){\n            output = target.clients\n        }\n        break;\n    }\n    case \"STATE\":{\n        const aps = msg.payload.Wifi.BSSId === undefined ? msg.payload.Wifi.APMac : msg.payload.Wifi.BSSId\n        const updateState = (state) => {\n            if(target.clients){\n                output = target.clients\n            }\n            target.states[state] = msg.payload[state]\n        }\n        target.lastupdate = stamp;\n        target.connection.status = \"Online\"\n        target.connection.RSSI = msg.payload.Wifi.RSSI;\n        target.connection.ap = global.get(\"accesspoints\")[aps];\n        Object.keys(target.states).forEach(state => updateState(state))\n        global.set(target.name,target)\n        break;\n    }\n    case\"SENSOR\": {\n        if(target.sensors){\n            let changed = false\n            var targetsensors = target.sensors;\n            var inputsensors = msg.payload;\n            var sensor;\n            var sensortype;\n            for(sensor in targetsensors){\n                if(inputsensors.hasOwnProperty(sensor)){\n                    for(sensortype in inputsensors[sensor]){\n                        if(targetsensors[sensor].hasOwnProperty(sensortype)){\n                            if(isValidSensorChange(sensor,sensortype,targetsensors[sensor][sensortype],inputsensors[sensor][sensortype],targetsensors[sensor].lastupdate)){\n                                targetsensors[sensor][sensortype] = inputsensors[sensor][sensortype];\n                                targetsensors[sensor].lastupdate = stamp;\n                                changed = true\n                           }\n                        }\n                    }\n                }\n            }\n\n            target.connection.status = \"Online\"\n            target.lastupdate = stamp;\n            global.set(target.name,target)\n            if(changed){\n                output = target\n            }\n        }\n        break;\n    }\n    \n}\nfunction isEnvironmental(s){\n    if(s.includes('DS18')){\n        return true\n    }\n    /* if(s.includes('AM2301')){\n        return true\n    }*/\n    return false\n}\n\nfunction isValidSensorChange(sensor,type,current,incoming,lastupdate){\n    //node.warn(sensor+\" \"+type+\" \"+current+\" \"+incoming+\" \"+(stamp-lastupdate))\n    if(current === 0){\n        //might be initial value\n        return true\n    }\n    if(stamp - lastupdate > 60000){\n        //allow if last update is older than minute\n        return true\n    }\n    if(isEnvironmental(sensor)){\n        //filter out spikes\n        if(Math.abs(current - incoming) < 3) {\n            return true\n        }\n        return false\n    }\n    return true\n}\nif(output){\n    msg.payload = output;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 520,
        "y": 220,
        "wires": [
            [
                "b3724681.b20348"
            ]
        ]
    },
    {
        "id": "d7f2018b.7622f",
        "type": "json",
        "z": "f56ccabd.7567e8",
        "name": "tele",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 270,
        "y": 220,
        "wires": [
            [
                "73e49156.2b0bc"
            ]
        ]
    },
    {
        "id": "9931ca77.f651b8",
        "type": "catch",
        "z": "f56ccabd.7567e8",
        "name": "",
        "scope": [
            "d7f2018b.7622f",
            "88cba432.a05de8",
            "e309a4be.c9c9a8"
        ],
        "uncaught": false,
        "x": 130,
        "y": 280,
        "wires": [
            [
                "348add0.38b9224"
            ]
        ]
    },
    {
        "id": "348add0.38b9224",
        "type": "switch",
        "z": "f56ccabd.7567e8",
        "name": "TOGGLE ↓ LWT ↑",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "jsonata_exp",
                "v": "$contains($split(topic, \"/\")[2] , \"LWT\")\t",
                "vt": "jsonata"
            },
            {
                "t": "jsonata_exp",
                "v": "$contains($split(topic, \"/\")[2] , \"POWER\")",
                "vt": "jsonata"
            },
            {
                "t": "jsonata_exp",
                "v": "$contains($split(topic, \"/\")[2] , \"POWER1\")",
                "vt": "jsonata"
            },
            {
                "t": "jsonata_exp",
                "v": "$contains($split(topic, \"/\")[2] , \"POWER2\")",
                "vt": "jsonata"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 295,
        "y": 280,
        "wires": [
            [
                "73e49156.2b0bc"
            ],
            [
                "f21b88a7.bb6d68"
            ],
            [
                "f21b88a7.bb6d68"
            ],
            [
                "f21b88a7.bb6d68"
            ]
        ],
        "l": false
    },
    {
        "id": "6e260a64.ac2454",
        "type": "change",
        "z": "f56ccabd.7567e8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "accesspoints",
                "pt": "global",
                "to": "{\"00:22:07:44:27:37\":\"P\",\"98:DE:D0:A0:9F:F6\":\"K\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 80,
        "wires": [
            [
                "6953f7ee.8027d8"
            ]
        ]
    },
    {
        "id": "2a51568.1b68aaa",
        "type": "inject",
        "z": "f56ccabd.7567e8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 80,
        "wires": [
            [
                "6e260a64.ac2454"
            ]
        ]
    },
    {
        "id": "b3724681.b20348",
        "type": "function",
        "z": "f56ccabd.7567e8",
        "name": "convert to message",
        "func": "let pf = global.get('protocolFilter') || []\nfunction updateClient(name,force){\n    let client = global.get(name)\n    if(client && client.controller){\n        let controller = global.get(client.controller.name)\n        client.lastupdate = controller.lastupdate\n        if(client.controller.prop == msg.command || force){\n            if(client.state != controller.states[client.controller.prop]){\n                client.state = controller.states[client.controller.prop]\n                if(force){\n                    client.desiredstate = client.state\n                }\n                \n            }\n        }\n        if(pf.includes(client.name)){\n             node.send({topic:\"deviceUpdate\", protocol:client.name, payload:{state:client.state,auto:client.auto,lastupdate:client.lastupdate}})\n        }\n        global.set(client.name,client)\n    }\n}\n\nfunction checkClientState(name){\n    let client = global.get(name)\n    if(client){\n        if(client.desiredstate != \"INIT\" && client.desiredstate != client.state){\n            node.send({topic:\"stateMismatchUpdate\", source:client.name, payload:client.desiredstate})\n        }\n        else{\n            updateClient(name,true)\n        }\n    }\n}\n\nfunction sendSensors(c){\n    let controller = global.get(c)\n    if(controller && controller.sensors){\n        Object.keys(controller.sensors).forEach(sensor => {\n            Object.keys(controller.sensors[sensor]).forEach(prop => {\n                if(prop != \"name\" && prop != \"lastupdate\"){\n                    var p = [c,sensor,prop].join('.')\n                    if(pf.includes(p)){\n                            node.send({\n                                topic:\"sensorUpdate\",\n                                protocol:p,\n                                payload:controller.sensors[sensor][prop],\n                                timestamp:controller.sensors[sensor].lastupdate\n                            }\n                        )\n                    }\n                }\n            })\n        })\n    }\n}\n\nfunction sendConnection(name){\n    var c = global.get(name)\n    if(c){\n        var p = [c.name,'connection'].join('.')\n        if(pf.includes(p)){\n            var pl = Object.assign({}, c.connection);\n            pl.name = c.displayname\n            node.send({topic:\"controllerConnection\",protocol:p,payload:pl,timestamp:c.lastupdate}) \n        }\n    }\n}\n\n\n\nswitch(msg.command){\n    case \"SENSOR\":{\n        sendConnection(msg.target)\n        sendSensors(msg.target)\n        break\n    }\n    case \"POWER\":\n    case \"POWER1\":\n    case \"POWER2\":\n    case \"RESULT\":{\n        msg.payload.forEach(client => updateClient(client))\n        break;\n    }\n    case \"STATE\": {\n        msg.payload.forEach(client => checkClientState(client))\n        break;\n    }\n    case \"LWT\":{\n        sendConnection(msg.target)\n        break\n    }\n    default:{\n        \n        \n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 200,
        "wires": [
            [
                "140f568a.584269"
            ]
        ]
    },
    {
        "id": "55f40931.6a8648",
        "type": "mqtt in",
        "z": "f56ccabd.7567e8",
        "name": "",
        "topic": "stat/#",
        "qos": "1",
        "datatype": "auto",
        "broker": "1cdc2a24.b3be46",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "88cba432.a05de8"
            ]
        ]
    },
    {
        "id": "88cba432.a05de8",
        "type": "json",
        "z": "f56ccabd.7567e8",
        "name": "stat",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 270,
        "y": 160,
        "wires": [
            [
                "980b6987.9507a8"
            ]
        ]
    },
    {
        "id": "980b6987.9507a8",
        "type": "change",
        "z": "f56ccabd.7567e8",
        "name": "parse topic",
        "rules": [
            {
                "t": "set",
                "p": "target",
                "pt": "msg",
                "to": "$split(msg.topic, \"/\")[1]",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "command",
                "pt": "msg",
                "to": "$split(msg.topic, \"/\")[2]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 395,
        "y": 160,
        "wires": [
            [
                "4e2f6e64.bc95d"
            ]
        ],
        "l": false
    },
    {
        "id": "4e2f6e64.bc95d",
        "type": "function",
        "z": "f56ccabd.7567e8",
        "name": "parse and set",
        "func": "var target = global.get(msg.target) || null;\nif(target === null){\n    return;\n}\nconst stamp = new Date().getTime()\nlet output = null\n\nswitch(msg.command){\n    case \"STATUS5\":{\n        target.connection.ip = msg.payload.StatusNET.IPAddress;\n        global.set(target.name,target)\n        break;\n    }\n    case \"RESULT\":{\n        const updateState = (state) => {\n            target.states[state] = msg.payload[state]\n            if(target.clients){\n                msg.command = state\n                output = target.clients\n            }\n        }\n        target.lastupdate = stamp;\n        target.connection.status = \"Online\"\n        Object.keys(msg.payload).forEach(state => updateState(state))\n        global.set(target.name,target)\n        break;\n    }\n}\n\nif(output){\n    msg.payload = output;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 160,
        "wires": [
            [
                "b3724681.b20348"
            ]
        ]
    },
    {
        "id": "140f568a.584269",
        "type": "switch",
        "z": "f56ccabd.7567e8",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "sensorUpdate",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "deviceUpdate",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "controllerConnection",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "stateMismatchUpdate",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 890,
        "y": 200,
        "wires": [
            [
                "fc65eb8e.101568"
            ],
            [
                "58ad6961.8135a8"
            ],
            [
                "4e7142f8.6a683c"
            ],
            [
                "28a99435.e9e60c"
            ]
        ]
    },
    {
        "id": "9581b2c8.b659d",
        "type": "mqtt out",
        "z": "f56ccabd.7567e8",
        "name": "",
        "topic": "",
        "qos": "1",
        "retain": "false",
        "broker": "1cdc2a24.b3be46",
        "x": 810,
        "y": 380,
        "wires": []
    },
    {
        "id": "6953f7ee.8027d8",
        "type": "change",
        "z": "f56ccabd.7567e8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "design",
                "pt": "global",
                "to": "{\"buttons\":{\"OFF\":\"gray\",\"ON\":\"green\"}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "28a99435.e9e60c",
        "type": "function",
        "z": "f56ccabd.7567e8",
        "name": "mqtt",
        "func": "let device = global.get(msg.source)\nmsg.topic = \"cmnd/\"+device.controller.name+\"/\"+device.controller.prop\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 260,
        "wires": [
            [
                "b264c7b4.3c0ed8"
            ]
        ]
    },
    {
        "id": "e49ce0db.9e432",
        "type": "mqtt in",
        "z": "f56ccabd.7567e8",
        "name": "",
        "topic": "cmnd/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "1cdc2a24.b3be46",
        "x": 130,
        "y": 340,
        "wires": [
            [
                "e309a4be.c9c9a8"
            ]
        ]
    },
    {
        "id": "e309a4be.c9c9a8",
        "type": "json",
        "z": "f56ccabd.7567e8",
        "name": "cmnd",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 270,
        "y": 340,
        "wires": [
            [
                "f21b88a7.bb6d68"
            ]
        ]
    },
    {
        "id": "f21b88a7.bb6d68",
        "type": "change",
        "z": "f56ccabd.7567e8",
        "name": "parse topic",
        "rules": [
            {
                "t": "set",
                "p": "target",
                "pt": "msg",
                "to": "$split(msg.topic, \"/\")[1]",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "command",
                "pt": "msg",
                "to": "$split(msg.topic, \"/\")[2]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 395,
        "y": 280,
        "wires": [
            [
                "b4e8534c.40077"
            ]
        ],
        "l": false
    },
    {
        "id": "b4e8534c.40077",
        "type": "function",
        "z": "f56ccabd.7567e8",
        "name": "parse manual",
        "func": "var target = global.get(msg.target) || null;\nif(target === null){\n    return;\n}\n\nlet output = null\n\nfunction sendSwitchCommand(){\n    let clientname = target.clients[msg.command] || null\n    if(!clientname){\n        return\n    }\n    let client = global.get(clientname) || null\n    if(!client){\n        return\n    }\n    switch(target.operation[msg.command]){\n        case \"TOGGLE\":{\n            client.desiredstate = client.state == \"OFF\" ? \"ON\" : \"OFF\"\n            global.set(client.name,client)\n            msg.payload = client.desiredstate,\n            msg.source = client.name\n            msg.topic = \"commandToMQTT\"\n            output = true\n            break\n        }\n        case \"ACK\":{\n            client.desiredstate = client.state == \"OFF\" ? \"ON\" : \"OFF\"\n            global.set(client.name,client)\n            msg.payload = client.desiredstate,\n            msg.source = client.name;\n            msg.topic = \"commandToClient\"\n            output = true\n            break\n        }\n    }\n}\n\nswitch(msg.command){\n    case \"POWER1\":\n    case \"POWER2\":{\n        sendSwitchCommand()\n        break;\n    }\n}\n\nif(output){\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 280,
        "wires": [
            [
                "4ea6a675.6de238"
            ]
        ]
    },
    {
        "id": "4ea6a675.6de238",
        "type": "switch",
        "z": "f56ccabd.7567e8",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "commandToMQTT",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "commandToClient",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 280,
        "wires": [
            [
                "28a99435.e9e60c"
            ],
            [
                "887fa668.f1f028"
            ]
        ]
    },
    {
        "id": "fc65eb8e.101568",
        "type": "link out",
        "z": "f56ccabd.7567e8",
        "name": "sensorUpdate",
        "links": [
            "139415e3.cca99a",
            "7bb9ea7f.8aec24"
        ],
        "x": 1035,
        "y": 100,
        "wires": []
    },
    {
        "id": "58ad6961.8135a8",
        "type": "link out",
        "z": "f56ccabd.7567e8",
        "name": "clientUpdate",
        "links": [
            "d92a98ad.7f5aa8",
            "7bb9ea7f.8aec24"
        ],
        "x": 1055,
        "y": 160,
        "wires": []
    },
    {
        "id": "4e7142f8.6a683c",
        "type": "link out",
        "z": "f56ccabd.7567e8",
        "name": "controllerConnection",
        "links": [
            "7bb9ea7f.8aec24"
        ],
        "x": 1055,
        "y": 220,
        "wires": []
    },
    {
        "id": "b264c7b4.3c0ed8",
        "type": "link out",
        "z": "f56ccabd.7567e8",
        "name": "mqttCMND",
        "links": [],
        "x": 1055,
        "y": 280,
        "wires": []
    },
    {
        "id": "887fa668.f1f028",
        "type": "link out",
        "z": "f56ccabd.7567e8",
        "name": "manualSwitch",
        "links": [],
        "x": 1035,
        "y": 340,
        "wires": []
    },
    {
        "id": "7bb9ea7f.8aec24",
        "type": "link in",
        "z": "f56ccabd.7567e8",
        "name": "toUi",
        "links": [
            "58ad6961.8135a8",
            "fc65eb8e.101568",
            "b42ec43e.9a72b8",
            "77279945.627938",
            "4e7142f8.6a683c"
        ],
        "x": 95,
        "y": 520,
        "wires": [
            [
                "efd1a703.f31b08"
            ]
        ]
    },
    {
        "id": "efd1a703.f31b08",
        "type": "uibuilder",
        "z": "f56ccabd.7567e8",
        "name": "",
        "topic": "",
        "url": "uibuilder",
        "fwdInMessages": false,
        "allowScripts": false,
        "allowStyles": false,
        "copyIndex": true,
        "templateFolder": "blank",
        "showfolder": false,
        "useSecurity": false,
        "sessionLength": 432000,
        "tokenAutoExtend": false,
        "x": 180,
        "y": 520,
        "wires": [
            [
                "6468fb15.8f3114"
            ],
            [
                "38d1dfd4.1cf65"
            ]
        ]
    },
    {
        "id": "fdd787bc.ed3ee8",
        "type": "function",
        "z": "f56ccabd.7567e8",
        "name": "from ui",
        "func": "\n\nif(msg.topic == \"deviceUpdate\"){\n    let device = global.get(msg.protocol)\n    if(msg.payload == 'power'){\n        let cmd = \"ON\"\n        if(device.state == \"ON\"){\n            cmd = \"OFF\"\n        }\n        device.desiredstate = cmd\n        global.set(device.name,device)\n        msg.topic = \"cmnd/\"+device.controller.name+\"/\"+device.controller.prop\n        msg.payload = cmd\n        \n        return [null,msg];\n    }\n    else if(msg.payload == 'auto'){\n        device.auto = !device.auto\n        global.set(device.name,device)\n        msg = {topic:\"deviceUpdate\", protocol:device.name, payload:{state:device.state,auto:device.auto,lastupdate:device.lastupdate}}\n        return [msg,null]\n    }\n\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 500,
        "wires": [
            [
                "b42ec43e.9a72b8"
            ],
            [
                "7867e4a6.8b8ddc"
            ]
        ]
    },
    {
        "id": "b42ec43e.9a72b8",
        "type": "link out",
        "z": "f56ccabd.7567e8",
        "name": "back to ui",
        "links": [
            "7bb9ea7f.8aec24"
        ],
        "x": 635,
        "y": 460,
        "wires": []
    },
    {
        "id": "38d1dfd4.1cf65",
        "type": "function",
        "z": "f56ccabd.7567e8",
        "name": "on ui connected",
        "func": "if(msg.from && msg.from == 'client'){\n    if(msg.uibuilderCtrl == 'ready for content' ){\n        node.send({topic:'protocolFilter',protocol:'node-red.protocol'})\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 560,
        "wires": [
            [
                "77279945.627938"
            ]
        ]
    },
    {
        "id": "77279945.627938",
        "type": "link out",
        "z": "f56ccabd.7567e8",
        "name": "reconnect",
        "links": [
            "7bb9ea7f.8aec24"
        ],
        "x": 515,
        "y": 560,
        "wires": []
    },
    {
        "id": "86c14ec6.8e7f9",
        "type": "link in",
        "z": "f56ccabd.7567e8",
        "name": "toMQTT",
        "links": [
            "7867e4a6.8b8ddc"
        ],
        "x": 695,
        "y": 380,
        "wires": [
            [
                "9581b2c8.b659d"
            ]
        ]
    },
    {
        "id": "6468fb15.8f3114",
        "type": "switch",
        "z": "f56ccabd.7567e8",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "protocolFilter",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "requestProtocolChannel",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "requestProtocolValue",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "closeProtocolChannel",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 5,
        "x": 310,
        "y": 440,
        "wires": [
            [
                "84b430bf.cf5f2"
            ],
            [
                "84b430bf.cf5f2"
            ],
            [
                "84b430bf.cf5f2"
            ],
            [
                "84b430bf.cf5f2"
            ],
            [
                "fdd787bc.ed3ee8"
            ]
        ]
    },
    {
        "id": "84b430bf.cf5f2",
        "type": "function",
        "z": "f56ccabd.7567e8",
        "name": "request  response",
        "func": "if (msg.topic == \"protocolFilter\") {\n    global.set(\"protocolFilter\", msg.payload)\n    return\n}\n\nlet devices = global.get('devices') || []\nlet controllers = global.get('controllers') || []\nlet protocolFilter = global.get(\"protocolFilter\") || []\n\nif (msg.topic == 'requestProtocolValue') {\n    sendResponse(msg.protocol)\n    return\n}\nif (msg.topic == 'requestProtocolChannel') {\n     if (!protocolFilter.includes(msg.protocol)) {\n        protocolFilter.push(msg.protocol)\n        global.set(\"protocolFilter\", protocolFilter)\n    }\n    sendResponse(msg.protocol)\n    return\n}\nif (msg.topic == 'closeProtocolChannel') {\n    const index = protocolFilter.indexOf(msg.protocol, 0);\n    if (index > -1) {\n        this.protocolFilter.splice(index, 1);\n        global.set(\"protocolFilter\", protocolFilter)\n    }\n}\n\n\n\nfunction sendResponse(protocol) {\n    let response = responseByProtocol(protocol)\n    if (!response) {\n        return\n    }\n    node.send(response)\n}\n\nfunction responseByProtocol(protocol) {\n    let response = generateDeviceResponse(protocol)\n    if (response) {\n        return response\n    }\n    response = generateSensorResponse(protocol)\n    if (response) {\n        return response\n    }\n    response = generateControlerResponse(protocol)\n    if (response) {\n        return response\n    }\n    return null\n}\n\nfunction generateDeviceResponse(p) {\n    let count = devices.length\n    let i\n    for (i = 0; i < count; i++){\n        let device = global.get(devices[i])\n        if (!device) {\n            continue\n        }\n        if (device.name == p) {\n            return {topic:\"deviceUpdate\", protocol:device.name, payload:{state:device.state,auto:device.auto,lastupdate:device.lastupdate}}\n        }\n    }    \n    return null\n}\nfunction generateControlerResponse(p) {\n    let parts = p.split('.')\n    if (parts.length < 2) {\n        return null\n    }\n    let name = parts[0]\n    if (!controllers.includes(name)) {\n        return null\n    }\n    let controller = global.get(controllers[controllers.indexOf(name)])\n    if (!controller) {\n        return null\n    }\n    var pl = Object.assign({}, controller.connection);\n    pl.name = controller.displayname\n    return {topic:\"controllerConnection\",protocol:p,payload:pl,timestamp:controller.lastupdate}\n\n}\n\nfunction generateSensorResponse(p) {\n    let parts = p.split('.')\n    if (parts.length < 3) {\n        return null\n    }\n    let name = parts[0]\n    if (!controllers.includes(name)) {\n        return null\n    }\n    let controller = global.get(controllers[controllers.indexOf(name)])\n    if (!controller) {\n        return null\n    }\n    if (!controller.sensors) {\n        return null\n    }\n    let sensor = controller.sensors[parts[1]]\n    if (!sensor) {\n        return null\n    }\n    let prop = sensor[parts[2]]\n    //node.warn('s:'+sensor+ ' p:'+prop)\n    if (!prop) {\n        return null\n    }\n    return {topic:\"sensorUpdate\",protocol:p,payload:prop,timestamp:sensor.lastupdate}\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 420,
        "wires": [
            [
                "b42ec43e.9a72b8",
                "76748ef6.af2b6"
            ]
        ]
    },
    {
        "id": "7867e4a6.8b8ddc",
        "type": "link out",
        "z": "f56ccabd.7567e8",
        "name": "fromUi",
        "links": [
            "86c14ec6.8e7f9"
        ],
        "x": 655,
        "y": 500,
        "wires": []
    },
    {
        "id": "76748ef6.af2b6",
        "type": "debug",
        "z": "f56ccabd.7567e8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 460,
        "wires": []
    }
]